import{a as F}from"./formatters-92bc75d8.js";import{d as I,R as C,a as N,o as d,h as V,f as t,b as a,t as P,p,a9 as _,L as k,x as c,y as f,M as h,c as g,F as w,j as M,A as $,e as b,z as j,a$ as O,a4 as U,r as D,I as E,b0 as J,b1 as q}from"./index-5caaa453.js";import{P as G}from"./vue3-perfect-scrollbar.esm-ba9c318d.js";import{V as T}from"./VBadge-7defb6dc.js";import{V as H}from"./VMenu-97c48b4e.js";import{V as K,a as Q,b as W,c as X}from"./VCard-1a5b2c5e.js";import{V as Y}from"./VTooltip-302d2810.js";import{V as y}from"./VDivider-d40713ce.js";import{V as Z,a as z,b as A,c as ee}from"./VList-4b1bf96e.js";import{V as ae}from"./VListItemAction-86de27dc.js";import{V as te}from"./VAvatar-3ee4c690.js";import{u as oe}from"./useApi-c9327355.js";import{$ as B}from"./api-44dd0fa9.js";const se={key:0},ie={class:"text-xs text-disabled"},ne={class:"d-flex flex-column align-center gap-4"},re={style:{"block-size":"28px","inline-size":"28px"}},le=I({__name:"Notifications",props:{notifications:{},badgeProps:{default:void 0},location:{default:"bottom end"}},emits:["read","unread","remove","click:notification"],setup(x,{emit:r}){const i=x,m=r,u=C(()=>i.notifications.some(e=>e.isSeen===!1)),v=()=>{const e=i.notifications.map(l=>l.id);u.value?m("read",e):m("unread",e)},s=C(()=>i.notifications.filter(e=>e.isSeen===!1).length);return(e,l)=>{const n=N("IconBtn"),L=N("RouterLink");return d(),V(n,{id:"notification-btn"},{default:t(()=>[a(T,P(i.badgeProps,{"model-value":i.notifications.some(o=>!o.isSeen),color:"error",content:p(s),class:"notification-badge"}),{default:t(()=>[a(_,{size:"26",icon:"tabler-bell"})]),_:1},16,["model-value","content"]),a(H,{activator:"parent",width:"380px",location:i.location,offset:"14px","close-on-content-click":!1},{default:t(()=>[a(K,{class:"d-flex flex-column"},{default:t(()=>[a(Q,{class:"notification-section"},{append:t(()=>[k(a(n,{onClick:v},{default:t(()=>[a(_,{icon:p(u)?"tabler-mail-opened":"tabler-mail"},null,8,["icon"]),a(Y,{activator:"parent",location:"start"},{default:t(()=>[c(f(p(u)?"Mark all as read":"Mark all as unread"),1)]),_:1})]),_:1},512),[[h,i.notifications.length]])]),default:t(()=>[a(W,{class:"text-lg"},{default:t(()=>[c(" Notifications ")]),_:1})]),_:1}),a(y),a(p(G),{options:{wheelPropagation:!1},style:{"max-block-size":"23.75rem"}},{default:t(()=>[a(Z,{class:"notification-list rounded-0 py-0"},{default:t(()=>[(d(!0),g(w,null,M(i.notifications,(o,R)=>(d(),g(w,{key:o.title},[R>0?(d(),V(y,{key:0})):$("",!0),a(z,{link:"",lines:"one","min-height":"66px",class:"list-item-hover-class",onClick:S=>e.$emit("click:notification",o)},{prepend:t(()=>[a(ae,{start:""},{default:t(()=>[a(te,{size:"40",color:o.color&&o.icon?o.color:void 0,image:o.img||void 0,icon:o.icon||void 0,variant:o.img?void 0:"tonal"},{default:t(()=>[o.text?(d(),g("span",se,f(("avatarText"in e?e.avatarText:p(F))(o.text)),1)):$("",!0)]),_:2},1032,["color","image","icon","variant"])]),_:2},1024)]),append:t(()=>[b("div",ne,[a(T,{dot:"",color:o.isSeen?"#a8aaae":"primary",class:j(`${o.isSeen?"visible-in-hover":""} ms-1`),onClick:O(S=>e.$emit(o.isSeen?"unread":"read",[o.id]),["stop"])},null,8,["color","class","onClick"]),b("div",re,[a(n,{size:"small",class:"visible-in-hover",onClick:S=>e.$emit("remove",o.id)},{default:t(()=>[a(_,{size:"20",icon:"tabler-x"})]),_:2},1032,["onClick"])])])]),default:t(()=>[a(A,{class:"font-weight-medium"},{default:t(()=>[c(f(o.title),1)]),_:2},1024),a(ee,null,{default:t(()=>[c(f(o.subtitle),1)]),_:2},1024),b("span",ie,f(o.time),1)]),_:2},1032,["onClick"])],64))),128)),k(a(z,{class:"text-center text-medium-emphasis",style:{"block-size":"56px"}},{default:t(()=>[a(A,null,{default:t(()=>[c("No Notification Found!")]),_:1})]),_:1},512),[[h,!i.notifications.length]])]),_:1})]),_:1}),a(y),k(a(X,null,{default:t(()=>[a(L,{to:"/notifications"},{default:t(()=>[a(U,{block:""},{default:t(()=>[c(" View All Notifications ")]),_:1})]),_:1})]),_:1},512),[[h,i.notifications.length]])]),_:1})]),_:1},8,["location"])]),_:1})}}});const ce="/admin/assets/paypal-01b645d1.svg",xe=I({__name:"NavBarNotifications",setup(x){const r=D([]);E(async()=>{try{const{data:s}=await oe("/get/admin/UI/notifications/unread");Array.isArray(s.value)?r.value=s.value.map(e=>({id:e.id,img:e.img==="path/to/avatar44.png"?J:e.img==="path/to/avatar45.png"?q:e.img==="path/to/paypal4.svg"?ce:"",title:e.title,subtitle:e.subtitle,time:e.time,isSeen:e.isSeen==="true",color:e.color||"default"})):console.error("Expected an array but got:",s.value)}catch(s){console.error("Failed to fetch notifications:",s)}});const i=s=>{r.value=r.value.filter(e=>e.id!==s)},m=async s=>{try{const l=await(await B("/notifications/mark-read",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({notificationIds:s})})).json();l.success?r.value=r.value.map(n=>({...n,isSeen:s.includes(n.id)?!0:n.isSeen})):console.error("Failed to mark notifications as read:",l.error)}catch(e){console.error("Failed to mark notifications as read:",e)}},u=async s=>{try{const l=await(await B("/notifications/mark-unread",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({notificationIds:s})})).json();l.success?r.value=r.value.map(n=>({...n,isSeen:s.includes(n.id)?!1:n.isSeen})):console.error("Failed to mark notifications as unread:",l.error)}catch(e){console.error("Failed to mark notifications as unread:",e)}},v=s=>{s.isSeen||m([s.id])};return(s,e)=>{const l=le;return d(),V(l,{notifications:r.value,onRemove:i,onRead:m,onUnread:u,"onClick:notification":v},null,8,["notifications"])}}});export{xe as _};
